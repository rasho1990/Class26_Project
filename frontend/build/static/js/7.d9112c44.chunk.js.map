{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","className","style","children","Map","center","zoom","mapRef","useRef","useEffect","map","window","google","maps","current","Marker","position","ref","PlaceItem","image","title","description","address","placeId","coordinates","onDeletePlace","creatorId","useContext","AuthContext","isLoggedIn","userId","token","useHttpRequest","isLoading","error","clearError","sendRequest","useState","showMap","setShowMap","showDelete","setShowDelete","closeMapHandler","closeDeleteHandler","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","contentClass","footerClass","footer","Button","onClick","inverse","a","async","url","body","headers","Authorization","request","method","console","log","deletePlaceHandler","danger","LoadingSpinner","asOverlay","src","alt","to","PlaceList","items","length","place","key","id","creator","location","UserPlaces","useParams","userPlaces","setUserPlaces","response","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/7.d9112c44.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = ({ className, style, children }) => {\n\treturn (\n\t\t<div className={`card ${className}`} style={style}>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from 'react';\n\nimport './Map.css';\n\nconst Map = ({ className, style, center, zoom }) => {\n\tconst mapRef = useRef();\n\n\tuseEffect(() => {\n\t\tconst map = new window.google.maps.Map(mapRef.current, {\n\t\t\tcenter,\n\t\t\tzoom,\n\t\t});\n\n\t\tnew window.google.maps.Marker({ position: center, map });\n\t}, [center, zoom]);\n\n\treturn <div ref={mapRef} className={`map ${className}`} style={style}></div>;\n};\n\nexport default Map;\n","import React, { useState, useContext, Fragment } from 'react';\n\nimport AuthContext from './../../shared/context/auth-context';\n\nimport Card from './../../shared/components/UIElements/Card';\nimport LoadingSpinner from './../../shared/components/UIElements/LoadingSpinner';\nimport Button from './../../shared/components/FormElements/Button';\nimport Modal from './../../shared/components/UIElements/Modal/Modal';\nimport ErrorModal from './../../shared/components/UIElements/Modal/ErrorModal';\nimport Map from './../../shared/components/UIElements/Map';\n\nimport useHttpRequest from './../../shared/hooks/http-hook';\n\nimport './PlaceItem.css';\n\nconst PlaceItem = ({\n  image,\n  title,\n  description,\n  address,\n  placeId,\n  coordinates,\n  onDeletePlace,\n  creatorId,\n}) => {\n  const { isLoggedIn, userId, token } = useContext(AuthContext);\n  const { isLoading, error, clearError, sendRequest } = useHttpRequest();\n\n  const [showMap, setShowMap] = useState(false);\n  const [showDelete, setShowDelete] = useState(false);\n\n  const openMapHandler = () => setShowMap(true);\n  const closeMapHandler = () => setShowMap(false);\n  const openDeleteHandler = () => setShowDelete(true);\n  const closeDeleteHandler = () => setShowDelete(false);\n  const deletePlaceHandler = async (placeId) => {\n    const url = `/api/places/${placeId}`;\n\n    const body = {};\n    const headers = {\n      Authorization: `Bearer ${token}`,\n    };\n\n    const request = {\n      method: 'DELETE',\n      body,\n      headers,\n    };\n\n    try {\n      await sendRequest(url, request.method, request.body, request.headers);\n    } catch (err) {\n      console.log('Error while deleting place!', err);\n    }\n\n    setShowDelete(false);\n    onDeletePlace(placeId);\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={address}\n        contentClass=\"place-item__modal-content\"\n        footerClass=\"place-item__modal-actions\"\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\n      >\n        <div className=\"map-container\">\n          <Map center={coordinates} zoom={16} />\n        </div>\n      </Modal>\n      <Modal\n        show={showDelete}\n        onCancel={closeDeleteHandler}\n        header={'Are you sure?'}\n        footerClass=\"place-item__modal-actions\"\n        footer={\n          <React.Fragment>\n            <Button onClick={closeDeleteHandler} inverse>\n              CANCEL\n            </Button>\n            <Button onClick={() => deletePlaceHandler(placeId)} danger>\n              DELETE\n            </Button>\n          </React.Fragment>\n        }\n      >\n        <p>\n          Do you really want to delete this place? This action is IRREVERSIBLE!\n        </p>\n      </Modal>\n      <li className=\"place-item\">\n        <Card className=\"place-item__content\">\n          {isLoading && <LoadingSpinner asOverlay />}\n          <div className=\"place-item__image\">\n            <img src={`http://localhost:5000/${image}`} alt={title} />\n          </div>\n          <div className=\"place-item__info\">\n            <h2>{title}</h2>\n            <h3>{address}</h3>\n            <p>{description}</p>\n          </div>\n          <div className=\"place-item__actions\">\n            <Button onClick={openMapHandler} inverse>\n              VIEW ON MAP\n            </Button>\n            {isLoggedIn && (\n              <Fragment>\n                {creatorId === userId && (\n                  <Button to={`/places/${placeId}`}>EDIT</Button>\n                )}\n                {creatorId === userId && (\n                  <Button onClick={openDeleteHandler} danger>\n                    DELETE\n                  </Button>\n                )}\n              </Fragment>\n            )}\n          </div>\n        </Card>\n      </li>\n    </React.Fragment>\n  );\n};\n\nexport default PlaceItem;\n","import React from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport PlaceItem from './PlaceItem';\nimport Button from './../../shared/components/FormElements/Button';\n\nimport './PlaceList.css';\n\nconst PlaceList = ({ items, onDeletePlace }) => {\n  if (items.length === 0) {\n    return (\n      <div className=\"place-list center\">\n        <Card>\n          <h2>No places found. Maybe create one?</h2>\n          <Button to=\"/places/new\">Share New Place</Button>\n        </Card>\n      </div>\n    );\n  }\n  return (\n    <ul className=\"place-list\">\n      {items.map(place => (\n        <PlaceItem\n          key={place.id}\n          placeId={place.id}\n          image={place.image}\n          title={place.title}\n          description={place.description}\n          address={place.address}\n          creatorId={place.creator}\n          coordinates={place.location}\n          onDeletePlace={onDeletePlace}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default PlaceList;\n","import React, { Fragment, useEffect, useState, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\n\n// Context\nimport AuthContext from './../../shared/context/auth-context';\n\nimport ErrorModal from './../../shared/components/UIElements/Modal/ErrorModal';\nimport LoadingSpinner from './../../shared/components/UIElements/LoadingSpinner';\n\n// Custom hooks\nimport useHttpRequest from './../../shared/hooks/http-hook';\n\nimport PlaceList from '../components/PlaceList';\n\nconst UserPlaces = () => {\n  const { userId } = useParams();\n  const { token } = useContext(AuthContext);\n  const [userPlaces, setUserPlaces] = useState([]);\n\n  const { isLoading, error, clearError, sendRequest } = useHttpRequest();\n\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        const url = `/api/places/user/${userId}`;\n\n        const request = {\n          method: 'GET',\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        };\n\n        const response = await sendRequest(\n          url,\n          request.method,\n          null,\n          request.headers\n        );\n\n        setUserPlaces(response);\n      } catch (err) {\n        console.log('Could not get all user places!', err);\n      }\n    };\n    fetchPlaces();\n  }, [sendRequest]);\n\n  const onDeletePlace = (deletedPlaceId) => {\n    // After deleted place update state again to show all current places\n    setUserPlaces((prevPlaces) =>\n      prevPlaces.filter((place) => place.id !== deletedPlaceId)\n    );\n  };\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && <LoadingSpinner asOverlay />}\n      <PlaceList items={userPlaces} onDeletePlace={onDeletePlace} />\n    </Fragment>\n  );\n};\n\nexport default UserPlaces;\n"],"sourceRoot":""}