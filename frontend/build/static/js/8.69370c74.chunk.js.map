{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Avatar.js","users/components/UserItem.js","users/components/UsersList.js","users/pages/UsersPage.js"],"names":["Card","className","style","children","Avatar","image","alt","width","src","height","UserItem","user","id","name","places","to","length","UsersList","users","map","key","UsersPage","useState","setUsers","useHttpRequest","isLoading","error","clearError","sendRequest","useEffect","a","async","responseData","console","log","fetchUsers","ErrorModal","onClear","LoadingSpinner","asOverlay"],"mappings":"qGAAA,0BAYeA,IARF,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACjC,OACC,yBAAKF,UAAS,eAAUA,GAAaC,MAAOA,GAC1CC,K,uLCKWC,G,YARA,SAAC,GAA6C,IAA3CH,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,MAAOG,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MAC/C,OACC,yBAAKN,UAAS,iBAAYA,GAAaC,MAAOA,GAC7C,yBAAKM,IAAKH,EAAOC,IAAKA,EAAKJ,MAAO,CAAEK,MAAOA,EAAOE,OAAQF,Q,QCqB9CG,EArBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACVC,EAA4BD,EAA5BC,GAAIP,EAAwBM,EAAxBN,MAAOQ,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,OACzB,OACE,wBAAIb,UAAU,aACZ,kBAACD,EAAA,EAAD,CAAMC,UAAU,sBACd,kBAAC,IAAD,CAAMc,GAAE,WAAMH,EAAN,YACN,yBAAKX,UAAU,oBACb,kBAAC,EAAD,CAAQI,MAAOA,EAAOC,IAAKO,KAE7B,yBAAKZ,UAAU,mBACb,4BAAKY,GACL,4BACGC,EAAOE,OADV,IACqC,IAAlBF,EAAOE,OAAe,QAAU,eCIhDC,G,MAjBG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OAAIA,GAA0B,IAAjBA,EAAMF,OAEf,yBAAKf,UAAU,UACb,kBAACD,EAAA,EAAD,KACE,iDAMN,wBAAIC,UAAU,cACXiB,GAASA,EAAMC,KAAI,SAAAR,GAAI,OAAI,kBAAC,EAAD,CAAUS,IAAKT,EAAKC,GAAID,KAAMA,U,gBCkBjDU,UA7BG,WAAO,IAAD,EACIC,mBAAS,IADb,mBACfJ,EADe,KACRK,EADQ,OAEgCC,cAA9CC,EAFc,EAEdA,UAAWC,EAFG,EAEHA,MAAOC,EAFJ,EAEIA,WAAYC,EAFhB,EAEgBA,YAkBtC,OAJAC,qBAAU,YAZS,mBAAAC,EAAAC,OAAA,sDACL,aADK,oBAAAD,EAAA,MAGYF,EAFjB,eADK,OAGTI,EAHS,OAKfT,EAASS,GALM,gDAOfC,QAAQC,IAAI,2BAAZ,MAPe,wDAajBC,KACC,CAACP,IAGF,kBAAC,WAAD,KACE,kBAACQ,EAAA,EAAD,CAAYV,MAAOA,EAAOW,QAASV,IAClCF,GAAa,kBAACa,EAAA,EAAD,CAAgBC,WAAS,IACvC,kBAAC,EAAD,CAAWrB,MAAOA","file":"static/js/8.69370c74.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = ({ className, style, children }) => {\n\treturn (\n\t\t<div className={`card ${className}`} style={style}>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from 'react';\n\nimport './Avatar.css';\n\nconst Avatar = ({ className, style, image, alt, width }) => {\n\treturn (\n\t\t<div className={`avatar ${className}`} style={style}>\n\t\t\t<img src={image} alt={alt} style={{ width: width, height: width }} />\n\t\t</div>\n\t);\n};\n\nexport default Avatar;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './UserItem.css';\n\nimport Avatar from './../../shared/components/UIElements/Avatar';\nimport Card from './../../shared/components/UIElements/Card';\n\nconst UserItem = ({ user }) => {\n  const { id, image, name, places } = user;\n  return (\n    <li className=\"user-item\">\n      <Card className=\"user-item__content\">\n        <Link to={`/${id}/places`}>\n          <div className=\"user-item__image\">\n            <Avatar image={image} alt={name} />\n          </div>\n          <div className=\"user-item__info\">\n            <h2>{name}</h2>\n            <h3>\n              {places.length} {places.length === 1 ? 'Place' : 'Places'}\n            </h3>\n          </div>\n        </Link>\n      </Card>\n    </li>\n  );\n};\n\nexport default UserItem;\n","import React from \"react\";\n\nimport UserItem from \"./UserItem\";\nimport Card from \"./../../shared/components/UIElements/Card\";\nimport \"./UsersList.css\";\n\nconst UsersList = ({ users }) => {\n  if (users && users.length === 0) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>No users found!</h2>\n        </Card>\n      </div>\n    );\n  }\n  return (\n    <ul className=\"users-list\">\n      {users && users.map(user => <UserItem key={user.id} user={user} />)}\n    </ul>\n  );\n};\n\nexport default UsersList;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport useHttpRequest from \"./../../shared/hooks/http-hook\";\n\nimport UsersList from \"./../components/UsersList\";\nimport LoadingSpinner from \"./../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"./../../shared/components/UIElements/Modal/ErrorModal\";\n\nconst UsersPage = () => {\n  const [users, setUsers] = useState([]);\n  const { isLoading, error, clearError, sendRequest } = useHttpRequest();\n\n  const fetchUsers = async () => {\n    const url = \"/api/users\";\n    try {\n      const responseData = await sendRequest(url);\n\n      setUsers(responseData);\n    } catch (err) {\n      console.log(\"Error in fetching users!\", err);\n    }\n  };\n\n  // Fetch users before page loads, with empty [] only runs once\n  useEffect(() => {\n    fetchUsers();\n  }, [sendRequest]);\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && <LoadingSpinner asOverlay />}\n      <UsersList users={users} />\n    </Fragment>\n  );\n};\n\nexport default UsersPage;\n"],"sourceRoot":""}